function cdls {
    builtin cd "$@"
	ls -l
}

clone() {
	local url=$1
	local repo="${url##*/}"
	local dir="${repo%.git}"
	git clone $url
	cd $dir
}

vagrant-halt-all() {
	for vm_dir in $(vagrant global-status | grep running | awk '{print $5}'); do
		cd "$vm_dir"
		vagrant halt
	done
}


# Recursive grep
rgrep() {
	grep -Ir $1 *
}

# Remove a file by inode
rm_inode() {
	find . -inum $1 -exec rm -i {} \;
}

# Create a new empty puppet module
make_puppet_module() {
	if [ ! -z $PUPPET_DIR ]; then
		if [ -z $1 ]; then
			echo "specify a module name!"
			exit 1
		fi
		if [ -d $PUPPET_DIR ]; then
			cd $PUPPET_DIR
			if [ -d modules/$1 ]; then
				echo "Module already exists!"
				exit 1
			fi
			mkdir -p modules/$1/{manifests,files,tests,lib,templates}
			cd modules/$1
		fi
	fi
}



# See what HTTP server a website uses:
what-http-server() {
	curl -s -I $(for h in "$@"; do printf "http://%s " "$h"; done) | awk -F': ' '/^Server:/ {print $2}';
}

# Check that scr exists and set these if it does:
if which scr>/dev/null 2>&1; then
	function vim() { scr vim $* ; }
	function man() { scr man $* ; }
fi

calc() {
        perl -wlne 'print eval';
}

# USAGE: days_in_month [month [year]]
days_in_month() {
	if [ -n "$1" ]
	then
		dim_m=$1
		dim_y=$2
	else
		eval `date "+dim_m=%m dim_y=%Y"`
	fi

	case $dim_m in
		*9|*4|*6|11)
			_DAYS_IN_MONTH=30 ;;
		1|01|3|03|*5|*7|*8|10|12)
			_DAYS_IN_MONTH=31 ;;
		2|02)
			is_leap_year ${dim_y:-`date +%Y`} &&
				_DAYS_IN_MONTH=29 ||
				_DAYS_IN_MONTH=28 ;;
	esac
	echo $_DAYS_IN_MONTH
}

# USAGE: is_leap_year [year]
is_leap_year() {
	ily_year=${1:-`date +%Y`}
	case $ily_year in
		*0[48] |\
		*[2468][048] |\
		*[13579][26] |\
		*[13579][26]0|\
		*[2468][048]00 |\
		*[13579][26]00 ) _IS_LEAP_YEAR=1
			return 0 ;;
		*) _IS_LEAP_YEAR=0
			return 1 ;;
	esac
}

# Search man pages
# Usage: sman command search_term
sman() {
	PAGER=less
	export PAGER
	LESS="$LESS${2:+ +/$2}" man $1
}

# usage: centre width text...
centre() {
	c_width=$1
	shift
	c_text="$*"
	c_width=$(( ($c_width + ${#c_text}) / 2 ))
	printf "%${c_width}.${c_width}s\n" "$c_text"
}

# Files modified today
today() {
	TODAY=`date +'%d-%m-%Y'`
	ls -l "$@" | grep "$TODAY" | more
}

lnp() {
	network=`ifconfig eth0 | grep "inet " | cut -f2 -d':' | cut -f1-3 -d.`
	ping -c 2 ${network}.${1}
}

# Handy Extract Program
extract() {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)   tar xvjf $1        ;;
			*.tar.gz)    tar xvzf $1     ;;
			*.bz2)       bunzip2 $1       ;;
			*.rar)       unrar x $1     ;;
			*.gz)        gunzip $1     ;;
			*.tar)       tar xvf $1        ;;
			*.tbz2)      tar xvjf $1      ;;
			*.tgz)       tar xvzf $1       ;;
			*.zip)       unzip $1     ;;
			*.Z)         uncompress $1  ;;
			*.7z)        7z x $1    ;;
			*)           echo "'$1' cannot be extracted via >extract<" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

# Clock - A bash clock that can run in your terminal window.
clock() {
	while true;do
		clear;
		echo ===============;
		date +%r;
		echo ===============;
		sleep 1;
	done
}

mkdircd() {
  mkdir -p "$1"
  cd "$1"
}
